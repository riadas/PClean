import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)

pclean_description_message = {
    "role": "user",
    "content": [
        {
            "type": "text",
            "text": "PClean is a domain-specific programming language for automated data cleaning. In the following, I will tell you about the structure of a PClean program and provide some example PClean programs, with associated dataset samples and error descriptions, and ask you to write a new PClean program given a new dataset sample and error description.\n\nA PClean program describes the schema of a dataset, as well as a generative model over that schema, where the generative model describes both the generation of correct rows from the schema as well as rows with errors. Given this generative model and a dirty dataset, a PClean program can then use probabilistic inference to perform an inversion process that fixes the errors in the dataset.\n\nFor example, below is a sample of a dataset about criminals (perpetrators), including both crime-related and general personal information. \n\nPerpetrator_ID,People_ID,Date,Year,Location,Country,Killed,Injured,People_ID,Name,Height,Weight,\"Home Town\"\n1,1,\"04.26 April 26/27\",1982.0,Uiryeong,\"South Korea\",56,37,1,\"Ron Baxter\",6.4,205.0,\"Los Angeles, CA\"\n2,3,\"11.18 Nov. 18\",1995.0,Zhaodong,China,32,16,3,\"Tyrone Brayan\",6.7,220.0,\"Placentia, CA\"\n3,4,\"05.21 May 21\",1938.0,Kaio,Japan,30,3,4,\"Rob Cunningham\",6.8,215.0,\"Westport, CT\"\n4,6,\"09.20 Sep. 20\",1994.0,Beijing,China,23,80,6,\"Ovie Dotson\",6.5,200.0,\"San Antonio, TX\"\n5,8,\"04.00 April\",1950.0,Nainital,India,22,0,8,\"Henry Johnson\",6.6,190.0,\"Los Angeles, CA\"\n\nIf we assume there are no errors in this dataset, the corresponding PClean program would be the following:\n\nPClean.@model PerpetratorModel begin\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        height ~ ChooseUniformly(possibilities[:height])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        perpetrator ~ Perpetrator\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name\n    people_height perpetrator.people.height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\nIf there are errors, then this base PClean program would be modified based on the type of errors present. There are three types of errors supported by PClean:\n\n*`typos`: Indicates that a particular column's values are prone to typos.\n\n*`unit_errors`: Indicates that some values in a column might be reported in one unit (e.g. bytes) and other values are reported in a different unit (e.g. kilobytes).\n\n*`swaps`: Indicates that some values in a column are incorrect and must be replaced (\"swapped\") with other values in the column. For example, the 'column_A' value in a row might be swapped with the 'column_A' value of other rows with the same 'column_B' value but different 'column_C' values.\n\nI now describe how the base PClean program changes with non-empty error descriptions. Below is a PClean program for the same perpetrator dataset, but which has typos in the name and location tables:\n\nPClean.@model PerpetratorModel begin\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        height ~ ChooseUniformly(possibilities[:height])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        perpetrator ~ Perpetrator\n        location ~ AddTypos(perpetrator.location, 2)\n        name ~ AddTypos(perpetrator.people.name, 2)\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name name\n    people_height perpetrator.people.height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\n\nNext, below is a PClean program with the same perpetrator dataset, but with height sometimes expressed in inches instead of feet (12 inches = one foot):\n\nunits = [Transformation(x -> x/1* 1.0, x -> x*1*1.0, x -> 1/1*1.0), Transformation(x -> x/12* 1.0, x -> x*12*1.0, x -> 1/12*1.0)]\n\nPClean.@model PerpetratorModel begin\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        perpetrator ~ Perpetrator\n        @learned avg_height::Dict{String, MeanParameter{70.0, 2.8284271247461903}}\n        unit_height ~ ChooseUniformly(units)\n        height_base = avg_height[\"$(people.name)_$(people.home_town)\"]\n        height ~ TransformedGaussian(height_base, 2.8284271247461903/10, unit_height)\n        height_corrected = round(unit_height.backward(height))\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name\n    people_height height_corrected height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\nFinally, below is a PClean program with the following error model: Sometimes, the name of a person is swapped with the names of others from the same home town, but with different heights.\n\nPClean.@model PerpetratorModel begin\n    @class Height begin\n        height ~ ChooseUniformly(possibilities[:height])\n    end\n\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        @learned error_probs::Dict{String, ProbParameter{10.0, 50.0}}\n        height ~ Height\n        perpetrator ~ Perpetrator\n        error_prob_height = error_probs[height.height]\n        name ~ MaybeSwap(perpetrator.people.name, swap_possibilities[\"$(perpetrator.people.home_town)-name\"], error_prob_height)\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name name\n    people_height height.height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\nGiven this information, I will now provide a sample of a new dataset and an error description, and ask you to write a PClean program for it. Are you ready?"
        }
    ]
}

rents_prompt = {
    "role": "user",
    "content": [
        {
            "type": "text",
            "text": "Awesome! Here's a dataset sample and an error description:\n\nDataset Excerpt:\nColumn1,Room Type,Monthly Rent,County,State\n0,studio,486.0,Mahoning County,OH\n1,4br,2152.0,Clark County,NV\n2,1br,1267.0,Gwinnett County,GA\n3,3br,1180.0,Granville County,NC\n4,,1436.0,Suffolk County,NY\n5,2br,1768.0,Miami-Dade County,FL\n6,,585.0,Sebastian County,AR\n7,studio,599.0,Lapeer County,MI\n8,3br,3056.0,Monterey County,CA\n9,3br,1193.0,St. Louis County,MN\n10,4br,1364.0,Pickaway County,OH\n11,2br,1937.0,Los Angeles County,\n12,studio,960.0,Buncombe County,NC\n13,3br,922.0,Greene County,NC\n14,3br,2123.0,Pierce County,WA\n15,1br,892.0,Clark County,NV\n16,3br,1371.0,Hinds County,MS\n17,studio,756.0,Richland County,\n18,2br,1140.0,Cowlitz County,WA\n19,studio,1180.0,Broward County,FL\n20,3br,1148.0,Cuyahoga County,OH\n21,studio,641.0,Franklin County,OH\n22,,1089.0,Salt Lake County,UT\n23,,1452.0,Ketchikan Gateway Borough,AK\n24,studio,744.0,Salt Lake County,UT\n25,1br,824.0,York County,PA\n26,4br,1509.0,Lafayette Parish,LA\n27,1br,985.0,Pinellas County,FL\n28,4br,1723.0,Pinal County,AZ\n29,2br,727.0,Monroe County,MS\n30,2br,902.0,Barry County,MI\n31,2br,1681.0,Morris County,NJ\n32,3br,3181.0,Rockingham Counyt,NH\n33,studio,795.0,Smith County,TX\n34,,1704.0,Los Angeles County,CA\n35,2br,995.0,Marion County,IN\n36,2br,1022.0,Allegheny County,PA\n37,studio,454.0,Treutlen County,GA\n38,studio,1022.0,Broward County,\n39,4br,1658.0,Johnson County,KS\n40,1br,687.0,Burnett County,WI\n\nError Description:\nThere are typos in the county name, and several missing values I hope to infer. Sometimes the rent is reported in thousands of dollars instead of dollars"
        }
    ]
}

flights_prompt = {
    "role": "user",
    "content": [
        {
            "type": "text",
            "text": "Awesome! Can you do the same for the below dataset excerpt and error description?\n\nDataset Excerpt:\ntuple_id,src,flight,sched_dep_time,act_dep_time,sched_arr_time,act_arr_time\n1,aa,AA-3859-IAH-ORD,7:10 a.m.,7:16 a.m.,9:40 a.m.,9:32 a.m.\n2,aa,AA-1733-ORD-PHX,7:45 p.m.,7:58 p.m.,10:30 p.m.,\n3,aa,AA-1640-MIA-MCO,6:30 p.m.,,7:25 p.m.,\n4,aa,AA-518-MIA-JFK,6:40 a.m.,6:54 a.m.,9:25 a.m.,9:28 a.m.\n5,aa,AA-3756-ORD-SLC,12:15 p.m.,12:41 p.m.,2:45 p.m.,2:50 p.m.\n6,aa,AA-204-LAX-MCO,11:25 p.m.,,12/02/2011 6:55 a.m.,\n7,aa,AA-3468-CVG-MIA,7:00 a.m.,7:25 a.m.,9:55 a.m.,9:45 a.m.\n8,aa,AA-484-DFW-MIA,4:15 p.m.,4:29 p.m.,7:55 p.m.,7:39 p.m.\n9,aa,AA-446-DFW-PHL,11:50 a.m.,12:12 p.m.,3:50 p.m.,4:09 p.m.\n10,aa,AA-466-IAH-MIA,6:00 a.m.,6:08 a.m.,9:20 a.m.,9:05 a.m.\n11,aa,AA-1886-BOS-MIA,10:45 a.m.,10:55 a.m.,2:20 p.m.,1:40 p.m.\n12,aa,AA-2957-DFW-CVG,7:55 a.m.,8:04 a.m.,11:05 a.m.,11:01 a.m.\n13,aa,AA-1664-MIA-ATL,10:15 a.m.,10:18 a.m.,12:10 p.m.,11:56 a.m.\n14,aa,AA-3979-CVG-ORD,7:30 a.m.,8:04 a.m.,8:00 a.m.,8:06 a.m.\n15,aa,AA-1279-DFW-PHX,1:00 p.m.,2:04 p.m.,2:35 p.m.,3:30 p.m.\n16,aa,AA-616-DFW-DTW,9:05 a.m.,10:10 a.m.,12:35 p.m.,1:27 p.m.\n17,aa,AA-4344-ORD-DTW,11:45 a.m.,12:13 p.m.,2:00 p.m.,2:10 p.m.\n18,aa,AA-2525-DFW-MIA,7:25 a.m.,7:39 a.m.,11:10 a.m.,11:06 a.m.\n19,aa,AA-404-MIA-MCO,6:45 a.m.,6:57 a.m.,7:45 a.m.,7:40 a.m.\n20,aa,AA-271-MIA-LAX,11:35 a.m.,11:52 a.m.,2:25 p.m.,2:27 p.m.\n21,aa,AA-2050-ORD-MIA,10:40 a.m.,11:05 a.m.,2:45 p.m.,2:46 p.m.\n22,aa,AA-4330-CVG-ORD,3:35 p.m.,3:36 p.m.,4:00 p.m.,3:33 p.m.\n23,aa,AA-1434-DFW-MCO,7:15 a.m.,7:21 a.m.,10:35 a.m.,10:36 a.m.\n24,aa,AA-4307-ORD-DTW,6:45 p.m.,6:55 p.m.,9:10 p.m.,8:53 p.m.\n25,aa,AA-3-JFK-LAX,12:00 p.m.,12:11 p.m.,3:15 p.m.,3:16 p.m.\n26,aa,AA-3842-MSP-ORD,6:00 a.m.,6:56 a.m.,7:30 a.m.,7:51 a.m.\n27,aa,AA-643-MIA-ORD,7:10 a.m.,7:30 a.m.,9:35 a.m.,9:31 a.m.\n28,aa,AA-1007-MIA-PHX,4:55 p.m.,5:08 p.m.,8:05 p.m.,7:55 p.m.\n29,aa,AA-1221-MCO-ORD,8:00 p.m.,8:23 p.m.,9:45 p.m.,9:53 p.m.\n30,aa,AA-400-DFW-JFK,10:40 a.m.,11:01 a.m.,2:59 p.m.,3:04 p.m.\n31,aa,AA-4198-ORD-CLE,10:40 a.m.,10:54 a.m.,12:55 p.m.,12:50 p.m.\n32,aa,AA-1522-SFO-ORD,11:55 p.m.,,12/02/2011 5:50 a.m.,\n33,aa,AA-3823-LAX-DEN,9:00 p.m.,,12/02/2011 12:15 a.m.,\n34,aa,AA-2312-DFW-DTW,8:25 p.m.,,11:50 p.m.,\n35,aa,AA-1165-JFK-MIA,6:59 a.m.,7:22 a.m.,10:34 a.m.,10:04 a.m.\n36,aa,AA-431-MIA-SFO,8:35 a.m.,8:51 a.m.,11:50 a.m.,11:44 a.m.\n37,aa,AA-649-ORD-SNA,1:30 p.m.,,3:50 p.m.,\n38,aa,AA-3063-SLC-LAX,8:20 p.m.,8:39 p.m.,9:20 p.m.,\n39,aa,AA-3804-PHL-ORD,2:35 p.m.,2:44 p.m.,4:05 p.m.,3:43 p.m.\n40,aa,AA-1917-JFK-MCO,2:55 p.m.,3:27 p.m.,5:55 p.m.,5:43 p.m.\n\nError Description: Sometimes the scheduled and actual arrival and departure times of a given flight are different across different sources. It should be inferred which of these is correct so all sources provide the same information!"
        }
    ]
}

hospital_prompt = {
    "role": "user",
    "content": [
        {
            "type": "text",
            "text": "Awesome! Can you do the same for the below dataset and error description? Note: Please don't invent new PClean library functions you haven't seen in existing examples!\n\nDataset Exercept:\nProviderNumber,HospitalName,Address1,Address2,Address3,City,State,ZipCode,CountyName,PhoneNumber,HospitalType,HospitalOwner,EmergencyService,Condition,MeasureCode,MeasureName,Score,Sample,Stateavg\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-card-2,surgery patients who were taking heart drugs caxxed beta bxockers before coming to the hospitax who were kept on the beta bxockers during the period just before and after their surgery,,,al_scip-card-2\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-1,surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection,,,al_scip-inf-1\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-2,surgery patients who were given the  right kind  of antibiotic to help prevent infection,,,al_scip-inf-2\n10018,callahan eye foundation hospital,1720 university blvd,,,birminghxm,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-3,surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery),,,al_scip-inf-3\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-4,all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery,,,al_scip-inf-4\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-6,surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor),,,al_scip-inf-6\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-vte-1,surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries,,,al_scip-vte-1\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingxam,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-vte-2,patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery,,,al_scip-vte-2\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-1,heart attack patients given aspirin at arrival,97%,33 patients,al_ami-1\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-2,heart attack patients given aspirin at discharge,92%,13 patients,al_ami-2\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffxeld,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-3,heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),75%,4 patients,al_ami-3\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-4,heart attack patients given smoking cessation advice/counseling,100%,4 patients,al_ami-4\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-5,heart attack patients given beta blocker at discharge,86%,14 patients,al_ami-5\n1xx19,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-7a,heart attack patients given fibrinolytic medication within 30 minutes of arrival,,0 patients,al_ami-7a\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-8a,heart attack patients given pci within 90 minutes of arrival,,0 patients,al_ami-8a\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-1,heart failure patients given discharge instructions,80%,114 patients,al_hf-1\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acuxe care hospixals,government - hospital district or authority,yes,heart failure,hf-2,heart failure patients given an evaluation of left ventricular systolic (lvs) function,99%,149 patients,al_hf-2\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-3,heart failure patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),92%,3x patients,al_hf-3\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-4,heart failure patients given smoking cessation advice/counseling,100%,41 patients,al_hf-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-1,heart attack patients given aspirin at arrival,98%,270 patients,al_ami-1\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-2,heart attack patients given aspirin at discharge,99%,516 patients,al_ami-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attaxk,ami-3,heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),96%,71 patients,al_ami-3\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospxtal dxstrxct or authorxty,yes,hearx axxack,ami-4,heart attack patients given smoking cessation advice/counseling,100%,244 patients,al_ami-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-5,heart attack patients given beta blocker at discharge,99%,441 patients,al_ami-5\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,334793870x,acute care hospitals,government - hospital district or authority,yxs,heart attack,ami-7a,heart attack patients given fibrinolytic medication within 30 minutes of arrival,,0 patients,al_ami-7a\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-8a,heart attack patients given pci within 90 minutes of arrival,72%,40 patients,al_ami-8a\n10001,southeast alabama medxcal center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-1,heart failure patients given discharge instructions,78%,455 patients,al_hf-1\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital xistrict or authority,yes,heart failure,hf-2,heart failure patients given an evaluation of left ventricular systolic (lvs) function,99%,514 patients,al_hf-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-3,heart failure patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),91%,165 patients,al_hf-3\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-4,heart failure patients given smoking cessation advice/counseling,100%,110 patients,al_hf-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-2,pneumonia patients assessed and given pneumococcal vaccination,93%,191 patients,al_pn-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,governmenx - hospixal disxricx or auxhorixy,yes,pneumonia,pn-3b,pneumonia patients whose initial emergency room blood culture was performed prior to the administration of the first hospital dose of antibiotics,89%,125 patients,al_pn-3b\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-4,pneumonia patients given smoking cessation advice/counseling,99%,107 patients,al_pn-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-5c,pneumonia patients given initial antibiotic(s) within 6 hours after arrival,92%,196 patients,al_pn-5c\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-6,pneumonia patients given the most appropriate initial antibiotic(s),80%,147 patients,al_pn-6\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-7,pneumonia patients assessed and given influenza vaccination,84%,160 patients,al_pn-7\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,xx479x8701,acute care hospitals,government - hospital district or authority,yes,surgical infection prevention,scip-card-2,surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery,72%,79 patients,al_scip-card-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,surgical infection prevention,scip-inf-1,surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection,94%,399 patients,al_scip-inf-1\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,surgical infection prevention,scip-inf-2,surgery patients who were given the  right kind  of antibiotic to help prevent infection,98%,405 patients,al_scip-inf-2\n\nError Description: There are typos in every column in the dataset."
        }
    ]
}

def handle_response(messages, message, benchmark_name):
    response_text = message.content[0].text
    print(response_text)
    response = {
                "role": "assistant",
                "content": [
                    {
                        "type": "text",
                        "text": message.content[0].text
                    }
                ]
            }

    messages.append(response)
    if benchmark_name != "":
        program = response_text.split("```")[1].replace("julia", "")
        
        with open(f'src/generator/direct_synthesis_outputs/output_{benchmark_name}.jl', 'w+') as f:
            f.write(program)

    return messages
    
messages = [pclean_description_message]

# provide description of pclean 
print("PROMPT 1: Provide description of PClean")
message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=2002,
    temperature=0,
    messages=messages
)

messages = handle_response(messages, message, "")

# ask claude to directly synthesize a pclean program for rents
print("PROMPT 2: Ask Claude to directly synthesize a PClean program for rents")
messages.append(rents_prompt)
message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=2002,
    temperature=0,
    messages=messages
)

messages = handle_response(messages, message, "rents")

# ask claude to directly synthesize a pclean program for flights
print("PROMPT 3: Ask Claude to directly synthesize a PClean program for flights")
messages.append(flights_prompt)
message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=2002,
    temperature=0,
    messages=messages
)

messages = handle_response(messages, message, "flights")

# ask claude to directly synthesize a pclean program for hospital
print("PROMPT 4: Ask Claude to directly synthesize a PClean program for hospital")
messages.append(hospital_prompt)
message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=2002,
    temperature=0,
    messages=messages
)

messages = handle_response(messages, message, "hospital")

# output from Anthropic console interaction:
# message = client.messages.create(
#     model="claude-3-5-sonnet-20241022",
#     max_tokens=2002,
#     temperature=0,
#     messages=[
#         {
#             "role": "user",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "PClean is a domain-specific programming language for automated data cleaning. In the following, I will tell you about the structure of a PClean program and provide some example PClean programs, with associated dataset samples and error descriptions, and ask you to write a new PClean program given a new dataset sample and error description.\n\nA PClean program describes the schema of a dataset, as well as a generative model over that schema, where the generative model describes both the generation of correct rows from the schema as well as rows with errors. Given this generative model and a dirty dataset, a PClean program can then use probabilistic inference to perform an inversion process that fixes the errors in the dataset.\n\nFor example, below is a sample of a dataset about criminals (perpetrators), including both crime-related and general personal information. \n\nPerpetrator_ID,People_ID,Date,Year,Location,Country,Killed,Injured,People_ID,Name,Height,Weight,\"Home Town\"\n1,1,\"04.26 April 26/27\",1982.0,Uiryeong,\"South Korea\",56,37,1,\"Ron Baxter\",6.4,205.0,\"Los Angeles, CA\"\n2,3,\"11.18 Nov. 18\",1995.0,Zhaodong,China,32,16,3,\"Tyrone Brayan\",6.7,220.0,\"Placentia, CA\"\n3,4,\"05.21 May 21\",1938.0,Kaio,Japan,30,3,4,\"Rob Cunningham\",6.8,215.0,\"Westport, CT\"\n4,6,\"09.20 Sep. 20\",1994.0,Beijing,China,23,80,6,\"Ovie Dotson\",6.5,200.0,\"San Antonio, TX\"\n5,8,\"04.00 April\",1950.0,Nainital,India,22,0,8,\"Henry Johnson\",6.6,190.0,\"Los Angeles, CA\"\n\nIf we assume there are no errors in this dataset, the corresponding PClean program would be the following:\n\nPClean.@model PerpetratorModel begin\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        height ~ ChooseUniformly(possibilities[:height])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        perpetrator ~ Perpetrator\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name\n    people_height perpetrator.people.height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\nIf there are errors, then this base PClean program would be modified based on the type of errors present. There are three types of errors supported by PClean:\n\n*`typos`: Indicates that a particular column's values are prone to typos.\n\n*`unit_errors`: Indicates that some values in a column might be reported in one unit (e.g. bytes) and other values are reported in a different unit (e.g. kilobytes).\n\n*`swaps`: Indicates that some values in a column are incorrect and must be replaced (\"swapped\") with other values in the column. For example, the 'column_A' value in a row might be swapped with the 'column_A' value of other rows with the same 'column_B' value but different 'column_C' values.\n\nI now describe how the base PClean program changes with non-empty error descriptions. Below is a PClean program for the same perpetrator dataset, but which has typos in the name and location tables:\n\nPClean.@model PerpetratorModel begin\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        height ~ ChooseUniformly(possibilities[:height])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        perpetrator ~ Perpetrator\n        location ~ AddTypos(perpetrator.location, 2)\n        name ~ AddTypos(perpetrator.people.name, 2)\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name name\n    people_height perpetrator.people.height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\n\nNext, below is a PClean program with the same perpetrator dataset, but with height sometimes expressed in inches instead of feet (12 inches = one foot):\n\nunits = [Transformation(x -> x/1* 1.0, x -> x*1*1.0, x -> 1/1*1.0), Transformation(x -> x/12* 1.0, x -> x*12*1.0, x -> 1/12*1.0)]\n\nPClean.@model PerpetratorModel begin\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        perpetrator ~ Perpetrator\n        @learned avg_height::Dict{String, MeanParameter{70.0, 2.8284271247461903}}\n        unit_height ~ ChooseUniformly(units)\n        height_base = avg_height[\"$(people.name)_$(people.home_town)\"]\n        height ~ TransformedGaussian(height_base, 2.8284271247461903/10, unit_height)\n        height_corrected = round(unit_height.backward(height))\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name\n    people_height height_corrected height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\nFinally, below is a PClean program with the following error model: Sometimes, the name of a person is swapped with the names of others from the same home town, but with different heights.\n\nPClean.@model PerpetratorModel begin\n    @class Height begin\n        height ~ ChooseUniformly(possibilities[:height])\n    end\n\n    @class People begin\n        people_id ~ Unmodeled()\n        name ~ ChooseUniformly(possibilities[:name])\n        weight ~ ChooseUniformly(possibilities[:weight])\n        home_town ~ ChooseUniformly(possibilities[:home_town])\n    end\n\n    @class Perpetrator begin\n        perpetrator_id ~ Unmodeled()\n        people ~ People\n        date ~ ChooseUniformly(possibilities[:date])\n        year ~ ChooseUniformly(possibilities[:year])\n        location ~ ChooseUniformly(possibilities[:location])\n        country ~ ChooseUniformly(possibilities[:country])\n        killed ~ ChooseUniformly(possibilities[:killed])\n        injured ~ ChooseUniformly(possibilities[:injured])\n    end\n\n    @class Obs begin\n        @learned error_probs::Dict{String, ProbParameter{10.0, 50.0}}\n        height ~ Height\n        perpetrator ~ Perpetrator\n        error_prob_height = error_probs[height.height]\n        name ~ MaybeSwap(perpetrator.people.name, swap_possibilities[\"$(perpetrator.people.home_town)-name\"], error_prob_height)\n    end\nend\n\nquery = @query PerpetratorModel.Obs [\n    perpetrator_id perpetrator.perpetrator_id\n    perpetrator_date perpetrator.date\n    perpetrator_year perpetrator.year\n    perpetrator_location perpetrator.location\n    perpetrator_country perpetrator.country\n    perpetrator_killed perpetrator.killed\n    perpetrator_injured perpetrator.injured\n    people_id perpetrator.people.people_id\n    people_name perpetrator.people.name name\n    people_height height.height\n    people_weight perpetrator.people.weight\n    people_home_town perpetrator.people.home_town\n]\n\nGiven this information, I will now provide a sample of a new dataset and an error description, and ask you to write a PClean program for it. Are you ready?"
#                 }
#             ]
#         },
#         {
#             "role": "assistant",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "Yes, I'm ready! I understand that:\n\n1. A PClean program consists of a model with classes that describe the schema and generative process of the data\n2. The program can handle three types of errors:\n   - typos (using AddTypos)\n   - unit errors (using Transformation and TransformedGaussian)\n   - swaps (using MaybeSwap)\n3. The program needs both a model definition and a query specification\n4. The error handling is implemented in the Obs class\n5. The specific error handling approach depends on the type of error described\n\nPlease provide the new dataset sample and error description, and I'll help write a PClean program for it."
#                 }
#             ]
#         },
#         {
#             "role": "user",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "Awesome! Here's a dataset sample and an error description:\n\nDataset Excerpt:\nColumn1,Room Type,Monthly Rent,County,State\n0,studio,486.0,Mahoning County,OH\n1,4br,2152.0,Clark County,NV\n2,1br,1267.0,Gwinnett County,GA\n3,3br,1180.0,Granville County,NC\n4,,1436.0,Suffolk County,NY\n5,2br,1768.0,Miami-Dade County,FL\n6,,585.0,Sebastian County,AR\n7,studio,599.0,Lapeer County,MI\n8,3br,3056.0,Monterey County,CA\n9,3br,1193.0,St. Louis County,MN\n10,4br,1364.0,Pickaway County,OH\n11,2br,1937.0,Los Angeles County,\n12,studio,960.0,Buncombe County,NC\n13,3br,922.0,Greene County,NC\n14,3br,2123.0,Pierce County,WA\n15,1br,892.0,Clark County,NV\n16,3br,1371.0,Hinds County,MS\n17,studio,756.0,Richland County,\n18,2br,1140.0,Cowlitz County,WA\n19,studio,1180.0,Broward County,FL\n20,3br,1148.0,Cuyahoga County,OH\n21,studio,641.0,Franklin County,OH\n22,,1089.0,Salt Lake County,UT\n23,,1452.0,Ketchikan Gateway Borough,AK\n24,studio,744.0,Salt Lake County,UT\n25,1br,824.0,York County,PA\n26,4br,1509.0,Lafayette Parish,LA\n27,1br,985.0,Pinellas County,FL\n28,4br,1723.0,Pinal County,AZ\n29,2br,727.0,Monroe County,MS\n30,2br,902.0,Barry County,MI\n31,2br,1681.0,Morris County,NJ\n32,3br,3181.0,Rockingham Counyt,NH\n33,studio,795.0,Smith County,TX\n34,,1704.0,Los Angeles County,CA\n35,2br,995.0,Marion County,IN\n36,2br,1022.0,Allegheny County,PA\n37,studio,454.0,Treutlen County,GA\n38,studio,1022.0,Broward County,\n39,4br,1658.0,Johnson County,KS\n40,1br,687.0,Burnett County,WI\n\nError Description:\nThere are typos in the county name, and several missing values I hope to infer. Sometimes the rent is reported in thousands of dollars instead of dollars"
#                 }
#             ]
#         },
#         {
#             "role": "assistant",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "Based on the dataset and error description, I'll create a PClean program that handles:\n1. Typos in the county names\n2. Missing values in both Room Type and State\n3. Unit conversion for rent (thousands vs. dollars)\n\nHere's the program:\n\n```julia\nunits = [Transformation(x -> x/1* 1.0, x -> x*1*1.0, x -> 1/1*1.0), \n         Transformation(x -> x/1000* 1.0, x -> x*1000*1.0, x -> 1/1000*1.0)]\n\nPClean.@model RentalModel begin\n    @class Location begin\n        county ~ ChooseUniformly(possibilities[:county])\n        state ~ ChooseUniformly(possibilities[:state])\n    end\n\n    @class Rental begin\n        id ~ Unmodeled()\n        room_type ~ ChooseUniformly(possibilities[:room_type])\n        location ~ Location\n    end\n\n    @class Obs begin\n        rental ~ Rental\n        \n        # Handle typos in county names\n        county ~ AddTypos(rental.location.county, 2)\n        \n        # Handle missing values in room_type and state\n        room_type ~ MaybeNA(rental.room_type)\n        state ~ MaybeNA(rental.location.state)\n        \n        # Handle rent unit conversion\n        @learned avg_rent::Dict{String, MeanParameter{1000.0, 500.0}}\n        unit_rent ~ ChooseUniformly(units)\n        rent_base = avg_rent[\"$(rental.room_type)_$(rental.location.state)\"]\n        rent ~ TransformedGaussian(rent_base, 500.0/10, unit_rent)\n        rent_corrected = round(unit_rent.backward(rent))\n    end\nend\n\nquery = @query RentalModel.Obs [\n    id rental.id\n    room_type rental.room_type room_type\n    monthly_rent rent_corrected rent\n    county rental.location.county county\n    state rental.location.state state\n]\n```\n\nThis program:\n\n1. Defines a basic schema with Location and Rental classes\n2. Handles typos in county names using `AddTypos`\n3. Handles missing values in room_type and state using `MaybeNA`\n4. Handles rent unit conversion using `TransformedGaussian` with two possible units (dollars and thousands of dollars)\n5. Uses learned parameters for average rent based on room type and state\n6. Includes all necessary fields in the query specification\n\nThe program should be able to:\n- Correct typos in county names (like \"Counyt\" to \"County\")\n- Infer missing room types and states based on other data\n- Convert all rent values to a consistent unit (dollars)"
#                 }
#             ]
#         },
#         {
#             "role": "user",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "Awesome! Can you do the same for the below dataset excerpt and error description?\n\nDataset Excerpt:\ntuple_id,src,flight,sched_dep_time,act_dep_time,sched_arr_time,act_arr_time\n1,aa,AA-3859-IAH-ORD,7:10 a.m.,7:16 a.m.,9:40 a.m.,9:32 a.m.\n2,aa,AA-1733-ORD-PHX,7:45 p.m.,7:58 p.m.,10:30 p.m.,\n3,aa,AA-1640-MIA-MCO,6:30 p.m.,,7:25 p.m.,\n4,aa,AA-518-MIA-JFK,6:40 a.m.,6:54 a.m.,9:25 a.m.,9:28 a.m.\n5,aa,AA-3756-ORD-SLC,12:15 p.m.,12:41 p.m.,2:45 p.m.,2:50 p.m.\n6,aa,AA-204-LAX-MCO,11:25 p.m.,,12/02/2011 6:55 a.m.,\n7,aa,AA-3468-CVG-MIA,7:00 a.m.,7:25 a.m.,9:55 a.m.,9:45 a.m.\n8,aa,AA-484-DFW-MIA,4:15 p.m.,4:29 p.m.,7:55 p.m.,7:39 p.m.\n9,aa,AA-446-DFW-PHL,11:50 a.m.,12:12 p.m.,3:50 p.m.,4:09 p.m.\n10,aa,AA-466-IAH-MIA,6:00 a.m.,6:08 a.m.,9:20 a.m.,9:05 a.m.\n11,aa,AA-1886-BOS-MIA,10:45 a.m.,10:55 a.m.,2:20 p.m.,1:40 p.m.\n12,aa,AA-2957-DFW-CVG,7:55 a.m.,8:04 a.m.,11:05 a.m.,11:01 a.m.\n13,aa,AA-1664-MIA-ATL,10:15 a.m.,10:18 a.m.,12:10 p.m.,11:56 a.m.\n14,aa,AA-3979-CVG-ORD,7:30 a.m.,8:04 a.m.,8:00 a.m.,8:06 a.m.\n15,aa,AA-1279-DFW-PHX,1:00 p.m.,2:04 p.m.,2:35 p.m.,3:30 p.m.\n16,aa,AA-616-DFW-DTW,9:05 a.m.,10:10 a.m.,12:35 p.m.,1:27 p.m.\n17,aa,AA-4344-ORD-DTW,11:45 a.m.,12:13 p.m.,2:00 p.m.,2:10 p.m.\n18,aa,AA-2525-DFW-MIA,7:25 a.m.,7:39 a.m.,11:10 a.m.,11:06 a.m.\n19,aa,AA-404-MIA-MCO,6:45 a.m.,6:57 a.m.,7:45 a.m.,7:40 a.m.\n20,aa,AA-271-MIA-LAX,11:35 a.m.,11:52 a.m.,2:25 p.m.,2:27 p.m.\n21,aa,AA-2050-ORD-MIA,10:40 a.m.,11:05 a.m.,2:45 p.m.,2:46 p.m.\n22,aa,AA-4330-CVG-ORD,3:35 p.m.,3:36 p.m.,4:00 p.m.,3:33 p.m.\n23,aa,AA-1434-DFW-MCO,7:15 a.m.,7:21 a.m.,10:35 a.m.,10:36 a.m.\n24,aa,AA-4307-ORD-DTW,6:45 p.m.,6:55 p.m.,9:10 p.m.,8:53 p.m.\n25,aa,AA-3-JFK-LAX,12:00 p.m.,12:11 p.m.,3:15 p.m.,3:16 p.m.\n26,aa,AA-3842-MSP-ORD,6:00 a.m.,6:56 a.m.,7:30 a.m.,7:51 a.m.\n27,aa,AA-643-MIA-ORD,7:10 a.m.,7:30 a.m.,9:35 a.m.,9:31 a.m.\n28,aa,AA-1007-MIA-PHX,4:55 p.m.,5:08 p.m.,8:05 p.m.,7:55 p.m.\n29,aa,AA-1221-MCO-ORD,8:00 p.m.,8:23 p.m.,9:45 p.m.,9:53 p.m.\n30,aa,AA-400-DFW-JFK,10:40 a.m.,11:01 a.m.,2:59 p.m.,3:04 p.m.\n31,aa,AA-4198-ORD-CLE,10:40 a.m.,10:54 a.m.,12:55 p.m.,12:50 p.m.\n32,aa,AA-1522-SFO-ORD,11:55 p.m.,,12/02/2011 5:50 a.m.,\n33,aa,AA-3823-LAX-DEN,9:00 p.m.,,12/02/2011 12:15 a.m.,\n34,aa,AA-2312-DFW-DTW,8:25 p.m.,,11:50 p.m.,\n35,aa,AA-1165-JFK-MIA,6:59 a.m.,7:22 a.m.,10:34 a.m.,10:04 a.m.\n36,aa,AA-431-MIA-SFO,8:35 a.m.,8:51 a.m.,11:50 a.m.,11:44 a.m.\n37,aa,AA-649-ORD-SNA,1:30 p.m.,,3:50 p.m.,\n38,aa,AA-3063-SLC-LAX,8:20 p.m.,8:39 p.m.,9:20 p.m.,\n39,aa,AA-3804-PHL-ORD,2:35 p.m.,2:44 p.m.,4:05 p.m.,3:43 p.m.\n40,aa,AA-1917-JFK-MCO,2:55 p.m.,3:27 p.m.,5:55 p.m.,5:43 p.m.\n\nError Description: Sometimes the scheduled and actual arrival and departure times of a given flight are different across different sources. It should be inferred which of these is correct so all sources provide the same information!"
#                 }
#             ]
#         },
#         {
#             "role": "assistant",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "For this dataset, we need to handle swaps in time values across different sources for the same flight. We'll use the `MaybeSwap` functionality to handle this, grouping by flight number to ensure consistency. Here's the PClean program:\n\n```julia\nPClean.@model FlightModel begin\n    @class Flight begin\n        flight_id ~ ChooseUniformly(possibilities[:flight])\n        sched_dep ~ ChooseUniformly(possibilities[:sched_dep_time])\n        sched_arr ~ ChooseUniformly(possibilities[:sched_arr_time])\n        act_dep ~ ChooseUniformly(possibilities[:act_dep_time])\n        act_arr ~ ChooseUniformly(possibilities[:act_arr_time])\n    end\n\n    @class Source begin\n        src_id ~ Unmodeled()\n        flight ~ Flight\n    end\n\n    @class Obs begin\n        source ~ Source\n        \n        # Handle potential swaps in time values for the same flight across sources\n        @learned error_probs::Dict{String, ProbParameter{10.0, 50.0}}\n        \n        # For scheduled departure time\n        error_prob_sched_dep = error_probs[source.flight.flight_id]\n        sched_dep_time ~ MaybeSwap(source.flight.sched_dep, \n                                  swap_possibilities[\"$(source.flight.flight_id)-sched_dep\"], \n                                  error_prob_sched_dep)\n        \n        # For scheduled arrival time\n        error_prob_sched_arr = error_probs[source.flight.flight_id]\n        sched_arr_time ~ MaybeSwap(source.flight.sched_arr, \n                                  swap_possibilities[\"$(source.flight.flight_id)-sched_arr\"], \n                                  error_prob_sched_arr)\n        \n        # For actual departure time\n        error_prob_act_dep = error_probs[source.flight.flight_id]\n        act_dep_time ~ MaybeNA(MaybeSwap(source.flight.act_dep, \n                                        swap_possibilities[\"$(source.flight.flight_id)-act_dep\"], \n                                        error_prob_act_dep))\n        \n        # For actual arrival time\n        error_prob_act_arr = error_probs[source.flight.flight_id]\n        act_arr_time ~ MaybeNA(MaybeSwap(source.flight.act_arr, \n                                        swap_possibilities[\"$(source.flight.flight_id)-act_arr\"], \n                                        error_prob_act_arr))\n    end\nend\n\nquery = @query FlightModel.Obs [\n    tuple_id source.src_id\n    src source.src_id\n    flight source.flight.flight_id\n    sched_dep_time source.flight.sched_dep sched_dep_time\n    act_dep_time source.flight.act_dep act_dep_time\n    sched_arr_time source.flight.sched_arr sched_arr_time\n    act_arr_time source.flight.act_arr act_arr_time\n]\n```\n\nThis program:\n\n1. Defines a basic schema with Flight and Source classes\n2. Uses `MaybeSwap` to handle inconsistent time values across sources for the same flight\n3. Groups the swaps by flight ID to ensure consistency\n4. Uses `MaybeNA` for actual arrival and departure times since these can be missing\n5. Uses learned error probabilities for each flight to determine likelihood of swaps\n6. Includes all necessary fields in the query specification\n\nThe program should be able to:\n- Identify and correct inconsistent time values across different sources for the same flight\n- Handle missing values in actual arrival and departure times\n- Maintain consistency of time values within each flight number\n- Learn which sources are more likely to have correct values"
#                 }
#             ]
#         },
#         {
#             "role": "user",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "Awesome! Can you do the same for the below dataset and error description? Note: Please don't invent new PClean library functions you haven't seen in existing examples!\n\nDataset Exercept:\nProviderNumber,HospitalName,Address1,Address2,Address3,City,State,ZipCode,CountyName,PhoneNumber,HospitalType,HospitalOwner,EmergencyService,Condition,MeasureCode,MeasureName,Score,Sample,Stateavg\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-card-2,surgery patients who were taking heart drugs caxxed beta bxockers before coming to the hospitax who were kept on the beta bxockers during the period just before and after their surgery,,,al_scip-card-2\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-1,surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection,,,al_scip-inf-1\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-2,surgery patients who were given the  right kind  of antibiotic to help prevent infection,,,al_scip-inf-2\n10018,callahan eye foundation hospital,1720 university blvd,,,birminghxm,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-3,surgery patients whose preventive antibiotics were stopped at the right time (within 24 hours after surgery),,,al_scip-inf-3\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-4,all heart surgery patients whose blood sugar (blood glucose) is kept under good control in the days right after surgery,,,al_scip-inf-4\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-inf-6,surgery patients needing hair removed from the surgical area before surgery who had hair removed using a safer method (electric clippers or hair removal cream c not a razor),,,al_scip-inf-6\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingham,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-vte-1,surgery patients whose doctors ordered treatments to prevent blood clots after certain types of surgeries,,,al_scip-vte-1\n10018,callahan eye foundation hospital,1720 university blvd,,,birmingxam,al,35233,jefferson,2053258100,acute care hospitals,voluntary non-profit - private,yes,surgical infection prevention,scip-vte-2,patients who got treatment  at the right time (within 24 hours before or after their surgery) to help prevent blood clots after certain types of surgery,,,al_scip-vte-2\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-1,heart attack patients given aspirin at arrival,97%,33 patients,al_ami-1\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-2,heart attack patients given aspirin at discharge,92%,13 patients,al_ami-2\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffxeld,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-3,heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),75%,4 patients,al_ami-3\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-4,heart attack patients given smoking cessation advice/counseling,100%,4 patients,al_ami-4\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-5,heart attack patients given beta blocker at discharge,86%,14 patients,al_ami-5\n1xx19,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-7a,heart attack patients given fibrinolytic medication within 30 minutes of arrival,,0 patients,al_ami-7a\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-8a,heart attack patients given pci within 90 minutes of arrival,,0 patients,al_ami-8a\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-1,heart failure patients given discharge instructions,80%,114 patients,al_hf-1\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acuxe care hospixals,government - hospital district or authority,yes,heart failure,hf-2,heart failure patients given an evaluation of left ventricular systolic (lvs) function,99%,149 patients,al_hf-2\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-3,heart failure patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),92%,3x patients,al_hf-3\n10019,helen keller memorial hospital,1300 south montgomery avenue,,,sheffield,al,35660,jefferson,2563864556,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-4,heart failure patients given smoking cessation advice/counseling,100%,41 patients,al_hf-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-1,heart attack patients given aspirin at arrival,98%,270 patients,al_ami-1\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-2,heart attack patients given aspirin at discharge,99%,516 patients,al_ami-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attaxk,ami-3,heart attack patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),96%,71 patients,al_ami-3\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospxtal dxstrxct or authorxty,yes,hearx axxack,ami-4,heart attack patients given smoking cessation advice/counseling,100%,244 patients,al_ami-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-5,heart attack patients given beta blocker at discharge,99%,441 patients,al_ami-5\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,334793870x,acute care hospitals,government - hospital district or authority,yxs,heart attack,ami-7a,heart attack patients given fibrinolytic medication within 30 minutes of arrival,,0 patients,al_ami-7a\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart attack,ami-8a,heart attack patients given pci within 90 minutes of arrival,72%,40 patients,al_ami-8a\n10001,southeast alabama medxcal center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-1,heart failure patients given discharge instructions,78%,455 patients,al_hf-1\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital xistrict or authority,yes,heart failure,hf-2,heart failure patients given an evaluation of left ventricular systolic (lvs) function,99%,514 patients,al_hf-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-3,heart failure patients given ace inhibitor or arb for left ventricular systolic dysfunction (lvsd),91%,165 patients,al_hf-3\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,heart failure,hf-4,heart failure patients given smoking cessation advice/counseling,100%,110 patients,al_hf-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-2,pneumonia patients assessed and given pneumococcal vaccination,93%,191 patients,al_pn-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,governmenx - hospixal disxricx or auxhorixy,yes,pneumonia,pn-3b,pneumonia patients whose initial emergency room blood culture was performed prior to the administration of the first hospital dose of antibiotics,89%,125 patients,al_pn-3b\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-4,pneumonia patients given smoking cessation advice/counseling,99%,107 patients,al_pn-4\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-5c,pneumonia patients given initial antibiotic(s) within 6 hours after arrival,92%,196 patients,al_pn-5c\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-6,pneumonia patients given the most appropriate initial antibiotic(s),80%,147 patients,al_pn-6\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,pneumonia,pn-7,pneumonia patients assessed and given influenza vaccination,84%,160 patients,al_pn-7\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,xx479x8701,acute care hospitals,government - hospital district or authority,yes,surgical infection prevention,scip-card-2,surgery patients who were taking heart drugs called beta blockers before coming to the hospital who were kept on the beta blockers during the period just before and after their surgery,72%,79 patients,al_scip-card-2\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,surgical infection prevention,scip-inf-1,surgery patients who were given an antibiotic at the right time (within one hour before surgery) to help prevent infection,94%,399 patients,al_scip-inf-1\n10001,southeast alabama medical center,1108 ross clark circle,,,dothan,al,36302,houston,3347938701,acute care hospitals,government - hospital district or authority,yes,surgical infection prevention,scip-inf-2,surgery patients who were given the  right kind  of antibiotic to help prevent infection,98%,405 patients,al_scip-inf-2\n\nError Description: There are typos in every column in the dataset."
#                 }
#             ]
#         },
#         {
#             "role": "assistant",
#             "content": [
#                 {
#                     "type": "text",
#                     "text": "For this dataset, we need to handle typos across all columns. Since we've seen that `AddTypos` is the function to handle typos, we'll use it for each column in the Obs class. Here's the PClean program:\n\n```julia\nPClean.@model HospitalModel begin\n    @class Hospital begin\n        provider_number ~ ChooseUniformly(possibilities[:provider_number])\n        hospital_name ~ ChooseUniformly(possibilities[:hospital_name])\n        address1 ~ ChooseUniformly(possibilities[:address1])\n        address2 ~ ChooseUniformly(possibilities[:address2])\n        address3 ~ ChooseUniformly(possibilities[:address3])\n        city ~ ChooseUniformly(possibilities[:city])\n        state ~ ChooseUniformly(possibilities[:state])\n        zip_code ~ ChooseUniformly(possibilities[:zip_code])\n        county_name ~ ChooseUniformly(possibilities[:county_name])\n        phone_number ~ ChooseUniformly(possibilities[:phone_number])\n        hospital_type ~ ChooseUniformly(possibilities[:hospital_type])\n        hospital_owner ~ ChooseUniformly(possibilities[:hospital_owner])\n        emergency_service ~ ChooseUniformly(possibilities[:emergency_service])\n        condition ~ ChooseUniformly(possibilities[:condition])\n        measure_code ~ ChooseUniformly(possibilities[:measure_code])\n        measure_name ~ ChooseUniformly(possibilities[:measure_name])\n        score ~ ChooseUniformly(possibilities[:score])\n        sample ~ ChooseUniformly(possibilities[:sample])\n        state_avg ~ ChooseUniformly(possibilities[:state_avg])\n    end\n\n    @class Obs begin\n        hospital ~ Hospital\n        \n        # Handle typos in all columns\n        provider_number ~ AddTypos(hospital.provider_number, 2)\n        hospital_name ~ AddTypos(hospital.hospital_name, 2)\n        address1 ~ AddTypos(hospital.address1, 2)\n        address2 ~ AddTypos(hospital.address2, 2)\n        address3 ~ AddTypos(hospital.address3, 2)\n        city ~ AddTypos(hospital.city, 2)\n        state ~ AddTypos(hospital.state, 2)\n        zip_code ~ AddTypos(hospital.zip_code, 2)\n        county_name ~ AddTypos(hospital.county_name, 2)\n        phone_number ~ AddTypos(hospital.phone_number, 2)\n        hospital_type ~ AddTypos(hospital.hospital_type, 2)\n        hospital_owner ~ AddTypos(hospital.hospital_owner, 2)\n        emergency_service ~ AddTypos(hospital.emergency_service, 2)\n        condition ~ AddTypos(hospital.condition, 2)\n        measure_code ~ AddTypos(hospital.measure_code, 2)\n        measure_name ~ AddTypos(hospital.measure_name, 2)\n        score ~ AddTypos(hospital.score, 2)\n        sample ~ AddTypos(hospital.sample, 2)\n        state_avg ~ AddTypos(hospital.state_avg, 2)\n    end\nend\n\nquery = @query HospitalModel.Obs [\n    provider_number hospital.provider_number provider_number\n    hospital_name hospital.hospital_name hospital_name\n    address1 hospital.address1 address1\n    address2 hospital.address2 address2\n    address3 hospital.address3 address3\n    city hospital.city city\n    state hospital.state state\n    zip_code hospital.zip_code zip_code\n    county_name hospital.county_name county_name\n    phone_number hospital.phone_number phone_number\n    hospital_type hospital.hospital_type hospital_type\n    hospital_owner hospital.hospital_owner hospital_owner\n    emergency_service hospital.emergency_service emergency_service\n    condition hospital.condition condition\n    measure_code hospital.measure_code measure_code\n    measure_name hospital.measure_name measure_name\n    score hospital.score score\n    sample hospital.sample sample\n    state_avg hospital.state_avg state_avg\n]\n```\n\nThis program:\n\n1. Defines a basic schema with a Hospital class containing all columns\n2. Uses `AddTypos` for every column in the Obs class to handle potential typos\n3. Sets the typo distance to 2 for each column, allowing for correction of up to 2 character errors\n4. Includes all columns in both the model and query specification\n\nThe program should be able to correct typos in all columns by comparing the observed values with the possible correct values in the possibilities dictionary."
#                 }
#             ]
#         }
#     ]
# )
# print(message.content)