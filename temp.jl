{
      "messages": [
            {"role": "system", "content": "You are a programmer helping write code from user instructions."},
            {"role": "user", "content": "PClean is a domain-specific language for dataset cleaning. In the following, I will provide an excerpt of a dataset to be cleaned, as well as a description of errors found in the dataset, and will ask you to write a PClean program that describes the schema of the dataset and its contained errors, which can be run to automatically fix the errors. \n\nDataset Excerpt:\nclassroom_building,classroom_room_number,capacity,section_id,section_semester,section_year,section_time_slot_id,course_id,title,credits,grade,department_name,department_building,budget,instructor_id,instructor_name,salary,student_id,student_name,total_credits\r\nWhitman,134,120,1,Fall,2009,K,486,Accounting,3,A-,Geology,Palmer,406557.93,77346,Mahmoud,99382.59,27094,Gur,120\r\nWhitman,134,120,1,Fall,2009,K,486,Accounting,3,B+,Geology,Palmer,406557.93,77346,Mahmoud,99382.59,49982,Haigh,41\r\nTaylor,183,71,2,Spring,2010,D,735,\"Greek Tragedy\",3,C-,Geology,Palmer,406557.93,77346,Mahmoud,99382.59,27094,Gur,120\r\nTaylor,183,71,2,Spring,2010,D,735,\"Greek Tragedy\",3,C-,Geology,Palmer,406557.93,77346,Mahmoud,99382.59,27094,Gur,120\r\nWhitman,434,32,1,Spring,2010,O,443,Journalism,4,B+,Physics,Wrigley,942162.76,74420,Voronina,121141.99,13880,Lazos,98\r\nPower,972,10,1,Spring,2006,D,864,\"Heat Transfer\",3,\"A \",Geology,Palmer,406557.93,77346,Mahmoud,99382.59,49982,Haigh,41\r\nPower,972,10,1,Spring,2006,D,864,\"Heat Transfer\",3,\"A \",Geology,Palmer,406557.93,77346,Mahmoud,99382.59,49982,Haigh,41\r\nSaucon,113,109,1,Spring,2001,O,702,Arabic,3,A+,Biology,Candlestick,647610.55,81991,Valtchev,77036.18,37586,Valtchev,19\r\nChandler,804,11,1,Spring,2003,D,599,Mechanics,4,C+,Psychology,Thompson,848175.04,22591,DAgostino,59706.49,73186,Schweitzer,3\r\nSaucon,180,15,1,Fall,2003,L,748,\"Tort Law\",4,C-,Cybernetics,Mercer,794541.46,99052,Dale,93348.83,79892,Chiari,76\n\nError Description: There are typos in the course_id column. Sometimes the budget value for a given department_name value are different across different department_building values, when they should be the same. It should be inferred which of these is correct so all department_building values provide the same information.\n\nGiven this dataset excerpt and error description, please respond with a PClean program that describes the schema of the datase and the errors it contains. In your response, don't include any other text other than the PClean program.\n"},
            {"role": "assistant", "content": "PClean.@model College2Model begin\n    @class Department_building begin\n        department_building ~ ChooseUniformly(possibilities[:department_building])\n    end\n\n    @class Department begin\n        department_name ~ ChooseUniformly(possibilities[:department_name])\n        budget ~ ChooseUniformly(possibilities[:budget])\n    end\n\n    @class Classroom begin\n        classroom_building ~ ChooseUniformly(possibilities[:classroom_building])\n        classroom_room_number ~ ChooseUniformly(possibilities[:classroom_room_number])\n        capacity ~ ChooseUniformly(possibilities[:capacity])\n    end\n\n    @class Course begin\n        course_id ~ ChooseUniformly(possibilities[:course_id])\n        title ~ ChooseUniformly(possibilities[:title])\n        department ~ Department\n        credits ~ ChooseUniformly(possibilities[:credits])\n    end\n\n    @class Instructor begin\n        instructor_id ~ ChooseUniformly(possibilities[:instructor_id])\n        instructor_name ~ ChooseUniformly(possibilities[:instructor_name])\n        department ~ Department\n        salary ~ ChooseUniformly(possibilities[:salary])\n    end\n\n    @class Section begin\n        course ~ Course\n        section_id ~ ChooseUniformly(possibilities[:section_id])\n        section_semester ~ ChooseUniformly(possibilities[:section_semester])\n        section_year ~ ChooseUniformly(possibilities[:section_year])\n        classroom ~ Classroom\n        time_slot_id ~ ChooseUniformly(possibilities[:time_slot_id])\n    end\n\n    @class Teaches begin\n        instructor ~ Instructor\n        section ~ Section\n    end\n\n    @class Student begin\n        student_id ~ ChooseUniformly(possibilities[:student_id])\n        student_name ~ ChooseUniformly(possibilities[:student_name])\n        department ~ Department\n        total_credits ~ ChooseUniformly(possibilities[:total_credits])\n    end\n\n    @class Takes_classes begin\n        student ~ Student\n        section ~ Section\n        grade ~ ChooseUniformly(possibilities[:grade])\n    end\n\n    @class Advisor begin\n        student ~ Student\n        instructor ~ Instructor\n    end\n\n    @class Prerequisite begin\n        course ~ Course\n    end\n\n    @class Obs begin\n        @learned error_probs::Dict{String, ProbParameter{10.0, 50.0}}\n        department_building ~ Department_building\n        teaches ~ Teaches\n        takes_classes ~ Takes_classes\n        advisor ~ Advisor\n        prerequisite ~ Prerequisite\n        error_prob_department_building = error_probs[department_building.department_building]\n        budget ~ MaybeSwap(prerequisite.course.department.budget, swap_possibilities[\"\$(prerequisite.course.department.department_name)-budget\"], error_prob_department_building)\n        course_id ~ AddTypos(prerequisite.course.course_id, 2)\n    end\nend\n\nquery = @query College2Model.Obs [\n    classroom_building teaches.section.classroom.classroom_building\n    classroom_room_number teaches.section.classroom.classroom_room_number\n    capacity teaches.section.classroom.capacity\n    department_name prerequisite.course.department.department_name\n    department_building department_building.department_building\n    budget prerequisite.course.department.budget budget\n    course_id prerequisite.course.course_id course_id\n    title prerequisite.course.title\n    credits prerequisite.course.credits\n    instructor_id teaches.instructor.instructor_id\n    instructor_name teaches.instructor.instructor_name\n    salary teaches.instructor.salary\n    section_id teaches.section.section_id\n    section_semester teaches.section.section_semester\n    section_year teaches.section.section_year\n    time_slot_id teaches.section.time_slot_id\n    student_id takes_classes.student.student_id\n    student_name takes_classes.student.student_name\n    total_credits takes_classes.student.total_credits\n    grade takes_classes.grade\n]\n\n\nobservations = [ObservedDataset(query, dirty_table)]\nconfig = PClean.InferenceConfig(5, 2; use_mh_instead_of_pg=true)\n@time begin \n    tr = initialize_trace(observations, config);\n    run_inference!(tr, config)\nend\n\nprintln(evaluate_accuracy(dirty_table, clean_table, tr.tables[:Obs], query))\n"},
        ]
}
